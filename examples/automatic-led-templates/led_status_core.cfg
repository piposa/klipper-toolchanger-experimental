####################################### MAIN LED TEMPLATES FOR NOZZLE AND LOGO #######################################



[gcode_macro DEBUG_LED]
description: "Toggle debugging for 'T<tool_number> (default: active)'"
gcode:
  {% set cur = printer['gcode_macro _toolchanger_led_vars'].get('debug', None) %}
  {% set tn = params.get('T', printer.toolchanger.tool_number)|string %}
  {% if cur is not none %}
    {% set cur = cur|string|replace(tn, '') if tn in cur|string else cur|string ~ tn %}
    SET_GCODE_VARIABLE MACRO='_toolchanger_led_vars' VARIABLE='debug' VALUE="{cur|string}"
  {% endif %}



#---< your templates can also call this to stay on track with the same global brightness setting.
[display_template _global_brightness_scalar]
param_rgbw_list: [0.0, 0.0, 0.0, 0.0]
text:
    {%- set lowest = 1.0 / 254.0 -%}
    {%- set bright = printer['gcode_macro _toolchanger_led_vars'].get('global_brightness', 1.0) -%}
    {%- for color in param_rgbw_list if param_rgbw_list is sequence and param_rgbw_list|length == 4 -%} 
        {',' if not loop.first else ''} {[color|float(0) * bright, (lowest * (color|float(0) > lowest))]|max}
    {%- else -%}
        1,0,0,0
    {%- endfor -%}



#---< main logo template autodetects: 
# - homing, calibrating, qgl, idle
# - toolchanging, printing, used in print
[display_template logo]
param_tn: 'None'
param_brightness: 1.0
param_idx: 0
param_max_idx: 0
text:
    {% if param_idx==0 and param_tn == 0 and '_UPDATE_TOOL_UI' in printer.gcode.commands and printer.webhooks.state|lower != 'shutdown' %}
        {% set gcode_obj = printer.printer.lookup_object('gcode', None) %} #hack
        {% set _ = gcode_obj.run_script_from_command("_UPDATE_TOOL_UI") if gcode_obj and gcode_obj is not none %} #hack
    {% endif %}
    # ---< pos/speed tolerance for autodetect.
    {% set pos_tol, vel_tol, brush_tol = 0.1, 0.1, 5 %} # mm | mm/s | mm
    # ---< short terms
    {% set p, _dbg     = printer, [] %}
    {% set th, tc, cfg = p.toolhead, p.toolchanger, p.configfile.settings%}

    {% if tc.has_detection %}
        {% set actn = tc.detected_tool_number %}
        {% set probe_name = 'probe' if 'probe' in cfg else False %}
    {% elif 'tool_probe_endstop' in p %}
        {% set actn = tool_probe_endstop.active_tool_number %}
        {% set probe_name = tool_probe_endstop.active_tool_probe %}
    {% else %}
        {% set actn = tc.tool_number %}
    {% endif %}
    {% set timeout_state    = p.idle_timeout.state|lower %} # printing (does anything) ready (does nothing) idle (idle timeout triggered)
    {% set print_state      = p.print_stats.state|lower %} # standby, printing
    {% set webhook_state    = p.webhooks.state|lower %} # no clue, shutdown maybe?

    {% set tool             = p[tc.tool_names[param_tn|int]] %}
    {% set ledvars, c       = p['gcode_macro _toolchanger_led_vars'], {'r':0, 'g':0, 'b':0, 'w':0} %}
    {% set brush_location   = ledvars.get('cache', {}).get('clean_location', False) %}
    {% set bright, invert   = param_brightness|float, False %}

    # ---< needed variables in here.
    {% set th_pos, now  = th.position, th.estimated_print_time %}
    {% set target_temp  = p[tool.extruder].target|float %}
    {% set live_pos     = p.motion_report.live_position %}
    {% set current_vel  = p.motion_report.live_velocity %}
    {% set speed_factor = p.gcode_move.speed_factor %}

    # ---< keeping track and getting main settings
    {% set colors          = ledvars.get('colors', {}).get('logo', {}) %}
    {% set flags = {'at_qgl_square':    False,   'at_qgl_point':          False,  
                    'at_probing_speed': False,   'at_probing_lift_speed': False,  
                    'at_homing_speed':  False,   'out_of_bounds':         False,
                    'at_brush':         False
                    } %}

    {% set ns = namespace(status='ready') %}

    {%- macro try_set_status(status, condition) -%}
        {% if status|string in colors and (colors[status]|string|length >= 4 or colors[status] is mapping) %}
            {%- set ns.status = status|string if condition else ns.status -%}
        {% elif status %}{%- set _ = _dbg.append("missing '" ~ status|string ~ "' in _toolchanger_led_vars.colors") -%}{% endif %}
    {%- endmacro -%}
    
    {%- macro set_flag(flag, condition) -%}{%- set _ = flags.update({flag: (condition or flags.get(flag))}) -%}{%- endmacro -%}

    # ====================================== STATE FLAGGING ======================================
    {% if actn == param_tn|int %}
        {% if timeout_state == 'printing' %}
        # ---< busy, will be overwritten with anything specifically busy...
        {try_set_status('busy', true)}
        # ---< check if at probing speed
        {% if probe_name and cfg[probe_name]|select('in', ['speed', 'lift_speed', ])|list|length == 2 %}
            {% set _ = set_flag('at_probing_speed',      (current_vel - (cfg[probe_name|lower]['speed'] *      speed_factor))|abs < vel_tol) %}
            {% set _ = set_flag('at_probing_lift_speed', (current_vel - (cfg[probe_name|lower]['lift_speed'] * speed_factor))|abs < vel_tol if cfg[probe_name|lower]['lift_speed'] != cfg[probe_name|lower]['speed']) %}
        {% endif %}

        # ---< check if at homing speed
        {% for step in ['stepper_x', 'stepper_y', 'stepper_z'] %}
            {% for speed_name in ['homing_speed', 'homing_retract_speed', 'second_homing_speed'] if speed_name in cfg[step] %}
                {% set _ = set_flag('at_homing_speed',  ((cfg[step][speed_name]) - current_vel)|abs < vel_tol) %}
                {% set _ = set_flag('at_probing_speed', ((cfg[step][speed_name]) - current_vel)|abs < vel_tol and 'z' in step) %}
            {% endfor %}
        {% endfor %}

        # ---< check if at out of bounds (probably homing)
        {% for i in range(3) %}
            {% set _ = set_flag('out_of_bounds', th_pos[i] <= th.axis_minimum[i] or th_pos[i] >= th.axis_maximum[i] or (th_pos[i] == 0.0 and False)) %} #todo reminder that i toggled this off
        {% endfor %}

        # ---< check if on lines of â–¡ with some tolerance and at or below QGL move height
        {% if 'quad_gantry_level' in p %}
            {% set coords = {'x': cfg.quad_gantry_level.points|map(attribute=0)|list, 'y': cfg.quad_gantry_level.points|map(attribute=1)|list} %}
            {% for ax, xa in [('x','y'), ('y','x')] %}
                    {% if (th_pos[ax] - coords[ax]|min)|abs < pos_tol or (th_pos[ax] - coords[ax]|max)|abs < pos_tol %}
                        {% if (coords[xa]|min - pos_tol) <= th_pos[xa] <= (coords[xa]|max + pos_tol) %}
                            {% set _ = set_flag('at_qgl_square', th_pos[2] <= cfg.quad_gantry_level.horizontal_move_z + pos_tol) %}
                        {% endif %}
                    {% endif %}
            {% endfor %}
            {% for pt in cfg.quad_gantry_level.points %} # ---< check if exactly on point.
                    {% set _ = set_flag('at_qgl_point', (live_pos[0] - pt[0])|abs < pos_tol and (live_pos[1] - pt[1])|abs < pos_tol) %}
            {% endfor %}
        {% endif %}
        # ---< check if at brush if we found it.
        {% for ax in ['x', 'y', 'z'] if brush_location and target_temp >= 100.0 %} 
                {% set _ = set_flag('at_brush', (th_pos[ax] - brush_location[ax])|abs < (brush_tol if current_vel <= 10 else brush_tol*2)) %}
        {% endfor %}

        # ====================================== STATUS SELECTION ======================================
        {try_set_status('printing'   , print_state == 'printing')}
        {try_set_status('cleaning'   , flags.at_brush)}
        {try_set_status('homing'     , flags.at_homing_speed or flags.at_probing_speed or flags.out_of_bounds)}
        {try_set_status('leveling'   , flags.at_qgl_square)}
        {try_set_status('calibrating', not p.tools_calibrate.calibration_probe_inactive) if 'tools_calibrate' in p else ''}
        {try_set_status('printing'   , print_state == 'printing' and p.print_stats.print_duration >= 300)} # ignore leveling/homing after 5 mins
        {try_set_status('changing'   , tc.status == 'changing')}
        # ---< safe to assume that currently probing (works sorta okay, just updates too slow)
        {% if ledvars.get('invert', False) %}
                {% set invert = (flags.at_probing_speed or flags.at_qgl_point) and ns.status in ['leveling', 'homing'] or invert %}
        {% else %}
                {try_set_status('probing' ,((flags.at_probing_speed or (flags.at_qgl_point and not flags.at_probing_lift_speed))) and ns.status in ['leveling', 'homing'])}
        {% endif %}
    {% endif %}
    
    # ---< active tool, but doesnt have to do something rn
    {try_set_status('paused', p.pause_resume.is_paused and 'pause_resume' in p)}

    {% else %} #status == 'ready' %}
        {try_set_status('busy', target_temp|int != 0)}
        {% set toolchanger_obj = p.printer.lookup_object('toolchanger', None) %}
        {% set change_tool = toolchanger_obj.__dict__.get('last_change_pickup_tool', None) if toolchanger_obj else None %}
        {try_set_status('changed', tc.status == 'changing' and param_tn|int == (change_tool.__dict__.get('tool_number', -1) if change_tool else -1))} 
        {try_set_status('error'  , tc.status == 'error'    and param_tn|int == (change_tool.__dict__.get('tool_number', -1) if change_tool else -1))} #todo test! (works!?)
    {% endif %}
    #{try_set_status('changed', tc.status == 'changing' and actn != tc.tool_number)}
    {try_set_status('idle'   , timeout_state == 'idle')}

    # ---< allow possible overwrite
    {try_set_status(ledvars.get('status', {}).get('logo', {}).get(param_tn|int, None), true)}
    # ---< unless we fucked up
    {try_set_status('error'  , 'error' in webhook_state or 'shutdown' in webhook_state)}

    # ====================================== STATUS COLOR APPLICATION ======================================
    {% set status_color = colors.get(ns.status, colors.get('ready', {})) %}

    # --------------------------------------< get the status colors if its colors.
    {% if status_color is mapping %}
        {% set _ = c.update(status_color) %}

    # --------------------------------------< if its a template, render it instead.
    {% elif status_color is string %}
        {% set tokens    = status_color.split() %}
        {% set tmpl_name = tokens[0] %}
        {% if 'display_template ' ~ tmpl_name not in cfg %}
            {%- set _ = _dbg.append('[display_template ' ~ tmpl_name ~ '] was not found in config.') -%}
        {% else %}
            # ---< add parameters from central template
            {% set render_parameters = {} %}
            {% set possible_parameters = {'param_tn': param_tn,
                                            'param_idx': param_idx, 
                                            'param_max_idx': param_max_idx,
                                            } %}
            # ---< add extra parameters from variable. (can overwrite default ones too)
            {% for tk in tokens[1:] %}
                {% set kv = tk.split('=', 1) %}
                {% set _ = possible_parameters.update({'param_' ~ (kv[0]|replace('param_', ''))|trim: kv[1]|trim}) if kv|length == 2 else None %}
            {% endfor %}
            
            # ---< now check if they are even needed, and if they are, push them on
            {% for k, v in possible_parameters.items() if k in cfg['display_template ' ~ tmpl_name] %}
                {% set _ = render_parameters.update({k: v}) %}
            {% endfor %}

            #{% set _ = _dbg.append("render_parameters: " ~ render_parameters) %}
            #{% set _ = _dbg.append("Config Keys: " ~ cfg['display_template ' ~ tmpl_name].keys()|string) %}
            #{% set _ = _dbg.append("Possible Params: " ~ possible_parameters.keys()|string) %}
            # ---< render template
            {% set rgbw_list = (render(tmpl_name, **render_parameters)|replace(' ', '')|replace('\n', '')).split(',')|map('float', default=0.0)|list %}
            {% for rgbw in c.copy().keys() %} {% set _ = c.update({rgbw: rgbw_list[loop.index0]|default(0)}) %} {% endfor %}
        {% endif %}
    {% endif %}

    # ====================================== ACTUAL LED OUTPUT ======================================
    # ---< Apply color inversion if wanted
    {% for k,v in c.copy().items() if invert %}{% set _ = c.update({k: (v-1)|abs}) %}{% endfor %}

    # ---< Add 0.004 (1/255) flicker to force klipper updates for static colors
    {% set kv = c|dictsort(false, 'value')|last if c.r or c.g or c.b or c.w else [] %}
    {% if kv and kv[1] > 0 and ledvars.get('force_updates', False) and param_idx == param_max_idx %}
        {% set _ = c.update({kv[0]: c[kv[0]] + ((now/0.5 % 2) * 2 - 1) * 0.00392}) %}
    {% endif %}


    # todo check if difference to current colors, if yes -> send a debug
    # ---< push leds out
    {render('_global_brightness_scalar', param_rgbw_list=[c.r * bright, c.g * bright, c.b * bright, c.w * bright])}

    {% if param_tn|string in ledvars.get('debug', '')|string and _dbg and param_idx|int == 0 %} # and (now - now|int) < 0.5
        {action_respond_info(_dbg|join('\n'))}
    {% endif %}



#---------------------------------< Thermal, interpolating between min and max for provided tn
[display_template nozzle]
param_tn: 'None'
param_idx: 0
param_brightness: 1.0
param_min_temp: 50
param_max_temp: 160
text:
    {% set max_t = param_max_temp|float %}
    {% set min_t = param_min_temp|float %}
    #--- Short-form variables ---
    {% set p       = printer %}
    {% set cfg     = p.configfile.settings %}
    {% set tc      = p.toolchanger %}
    {% set ledvars = p['gcode_macro _toolchanger_led_vars'] %}
    {% set colors  = ledvars.get('colors', {}).get('nozzle', {}) %}
    {% set c       = {'r':0, 'g':0, 'b':0, 'w':0} %}
    {% set bright  = param_brightness|float %}
    {% set rend_pa = {} %}

    # ---< get temps etc
    {% set e_name    = cfg[tc.tool_names[param_tn|int]|lower].extruder %}
    {% set cur_t     = p[e_name].temperature|float %}
    {% set tar_t     = p[e_name].target|float %}
    {% set is_active = (param_tn|int == tc.tool_number|int) %}

    # ---< determine the status
    {% set status = ledvars.get('status', {}).get('nozzle', {}).get(param_tn|int, 'thermal') %}
    {% if status == 'thermal' %}
        {% if is_active %}
            {% set status = 'on' %}
        {% else %}
            {% set status = 'ready' if tar_t == 0 and cur_t <= min_t else status %}
        {% endif %}
    {% endif %}

    # ---< get the setting for that status
    {% set status_color = colors.get(status, None) %}

    {% if status == 'thermal' %}
        {% set c_cold = colors.get('cold', {'r':0.0, 'g':0.0, 'b':1.0, 'w':0.0}) %}
        {% set c_hot  = colors.get('hot',  {'r':1.0, 'g':0.0, 'b':0.0, 'w':0.0}) %}
        {% set scalar = [ [ 0.0, (cur_t - min_t) / ([ (max_t - min_t)|abs, 0.01 ]|max) ]|max, 1.0 ]|min %}
        {% for k in c %}
            {% set _ = c.update({k: c_cold[k] + (c_hot[k] - c_cold[k]) * scalar }) %}
        {% endfor %}

    # ---< get the status colors if its colors.
    {% elif status_color is mapping %}
        {% set _ = c.update(status_color) %}

    # ---< if its a template, render it instead.
    {% elif status_color is string and 'display_template ' ~ status_color in cfg %}
        # ---< add possible parameters.
        {% set pos_params = {'param_tn': param_tn, 'param_idx': param_idx} %}
        {% for k, v in pos_params.items() if k in cfg['display_template ' ~ status_color] %}
            {% set _ = rend_pa.update({k: v}) %}
        {% endfor %}
        # ---< render template
        {% set rgbw_list = render(status_color, **rend_pa).split(',')|map('float', default=0.0)|list %}
        {% if rgbw_list|length == 4 %}
            {% set _ = c.update({'r': rgbw_list[0], 'g': rgbw_list[1], 'b': rgbw_list[2], 'w': rgbw_list[3]}) %}
        {% endif %}
    {% endif %}

    # ---< Apply brightness scaling for this led, also flicker randomly to force updates.
    {% set kv = c|dictsort(false, 'value')|last if c.r or c.g or c.b or c.w else [] %}
    {% if kv and kv[1] > 0 %}
        {% set tick = (p.toolhead.estimated_print_time)|int %}
        {% set flicker = ((tick % 2) * 2 - 1) * 0.004 %}
        {% set _ = c.update({kv[0]: c[kv[0]] + flicker}) %}
    {% endif %}

    {render('_global_brightness_scalar', param_rgbw_list=[c.r * bright, c.g * bright, c.b * bright, c.w * bright])}



# ---< automatically loads brush location if it finds it.
[delayed_gcode _LOAD_CLEAN_NOZZLE_LOCATION]
initial_duration: 0.1
gcode:
  {% set var_cache = printer['gcode_macro _toolchanger_led_vars'].cache %}
  {% if var_cache.get('clean_location', None) is none and printer.motion_report.live_velocity <= 0.001 %}
    {% set cache, _cache = {}, {} %}
    {% for stuff in printer if 'gcode_macro ' in stuff and not cache.values()|select|list %}
      {% if 'clean' in stuff|lower and 'nozzle' in stuff|lower %}
        {% for s in ['_', ''] if not cache.keys()|select|list %}
          {% set _ = _cache.clear() %}
          {% for k, v in printer[stuff].items() if k[s|length-1:] in [s ~ 'x', s ~ 'y', s ~ 'z'] and (v|string).isnumeric() %}
            {% set _ = _cache.update({k[-1] : v|float}) %}
          {% endfor %}
        {% set _ = cache.update(_cache, name=stuff) if _cache.values()|list|length == 3 else None %}
      {% endfor %}
      {% endif %}
    {% endfor %}
    {% set _ = var_cache.update({'clean_location': (False if cache.keys()|list|length != 4 else _cache)}) %}
    SET_GCODE_VARIABLE MACRO=_toolchanger_led_vars VARIABLE=cache VALUE="{var_cache}"
    #{action_respond_info("brush found at '" ~ _cache|string|replace('{','')|replace('}','')|replace("'",'') ~ "', is that correct?")}
  {% else %}
    UPDATE_DELAYED_GCODE ID=_LOAD_CLEAN_NOZZLE_LOCATION DURATION=1
  {% endif %}


