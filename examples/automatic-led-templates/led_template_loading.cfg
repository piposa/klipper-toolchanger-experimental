

# ---< initialize if we are currently not moving, if not, try again until we arent
[delayed_gcode _INITIALIZE_TOOL_LED_TEMPLATES]
initial_duration: 2
gcode:
  {% if printer.motion_report.live_velocity <= 0.001 %}
    {% for tn in printer.toolchanger.tool_numbers %}
      LOAD_TOOL_LED_TEMPLATE NAME='nozzle' TEMPLATE='nozzle' T={tn} 
      LOAD_TOOL_LED_TEMPLATE NAME='logo'   TEMPLATE='logo'   T={tn} 
    {% endfor %}
    _UPDATE_TOOL_UI
  {% else %}
    UPDATE_DELAYED_GCODE ID=_INITIALIZE_TOOL_LED_TEMPLATES DURATION=1
  {% endif %}



# ---< these still allow manual overwrite
[gcode_macro STATUS_OFF]
gcode:
  _OVERWRITE_STATUS LOCATION=NOZZLE STATUS=OFF T={params.T|default(printer.toolchanger.tool_number)|int}
  _OVERWRITE_STATUS LOCATION=LOGO   STATUS=OFF T={params.T|default(printer.toolchanger.tool_number)|int}

[gcode_macro STATUS_MESHING]
gcode:
  _OVERWRITE_STATUS LOCATION=LOGO   STATUS=MESHING T={params.T|default(printer.toolchanger.tool_number)|int}

[gcode_macro STATUS_ON]
gcode:
  _OVERWRITE_STATUS LOCATION=NOZZLE   STATUS=ON T={params.T|default(printer.toolchanger.tool_number)|int}

[gcode_macro _OVERWRITE_STATUS]
gcode:
    {% set tn = params.T|default(printer.toolchanger.tool_number)|int %}
    {% set status = printer['gcode_macro _toolchanger_led_vars'].status %}
    {% set location   = status.get(params.LOCATION|default('logo')|lower,   {}) %}
    {% set _ = location.update({tn: params.STATUS|default('ready')|lower}) %}
    {% set _ = status.update({params.LOCATION|default('logo')|lower: location}) %}
    SET_GCODE_VARIABLE MACRO='_toolchanger_led_vars' VARIABLE='status' VALUE="{status}"


# ---< these are deprecated and auto managed
[gcode_macro STATUS_HEATING]
gcode:
  STATUS_IDLE {rawparams ~ (' ' if rawparams else '') ~ 'NOZZLE=ONLY'}

[gcode_macro STATUS_READY]
gcode:
  STATUS_IDLE {rawparams}

[gcode_macro STATUS_RESET]
gcode:
  STATUS_IDLE {rawparams}

[gcode_macro STATUS_IDLE]
gcode:
  {% set tn = params.T|default(printer.toolchanger.tool_number)|int %}
  {% set status = printer['gcode_macro _toolchanger_led_vars'].status %}
  {% if 'LOGO' not in params %}
    {% set nozzle = status.get('nozzle', {}) %}
    {% set _ = nozzle.pop(tn, None) %}
    {% set _ = status.update({'nozzle': nozzle}) %}
  {% endif %}
  {% if 'NOZZLE' not in params %}
    {% set logo = status.get('logo', {}) %}
    {% set _ = logo.pop(tn, None) %}
    {% set _ = status.update({'logo': logo}) %}
  {% endif %}
  SET_GCODE_VARIABLE MACRO=_toolchanger_led_vars VARIABLE=status VALUE="{status}"


# ---< Main macro for loading templates, includes error proofing and dynamic parameter parsing
[gcode_macro LOAD_TOOL_LED_TEMPLATE]
variable_led_type: 'neopixel'
description: "usage: [NAME=nozzle/logo...] [TEMPLATE=thermal...]  [T=0,1,2...]"
gcode:                               
    # ---< short forms
    {% set p, tc, cfg = printer, printer.toolchanger, printer.configfile.settings %}
    {% set var_cache  = printer['gcode_macro _toolchanger_led_vars'].cache %}

    # ---< Parameter parsing
    {% set name       = params.NAME|default(None)|lower if params.NAME is defined else None %}
    {% set template   = params.TEMPLATE|default(None) %}
    {% set tn         = params.T|default(tc.tool_number)|int %}

    # ---< get all the required macros/variables
    {% set tkey       = tc.tool_names[tn]|replace('tool ', '') if tn != -1            else None %}
    {% set macro_name = 'gcode_macro _' ~ tkey ~ '_vars'       if tkey                else None %}
    {% set tmpl_name  = 'display_template ' ~ template         if template            else None %}
    {% set tool_macro = p[macro_name]                          if macro_name in p     else None %}
    {% set led_name   = tool_macro.get(name ~ '_led_name')     if tool_macro and name else None %}
    {% set led_idxs   = tool_macro.get(name ~ '_idx')|string   if tool_macro and name else None %}
    {% set led_long   = led_type ~ ' ' ~ led_name if ' ' not in led_name|string|trim  else   led_name %}
    {% set led_name   = led_name.split(' ')[1]    if ' '     in led_name|string|trim  else   led_name %}

    # ---< Macro for adding parameters if the template needs them
    {% macro try_add_param(key_name, value, extra_list) %}
        {% set _ = extra_list.append(key_name ~ '=' ~ value) if key_name in cfg[tmpl_name] %}
    {% endmacro %}

    # ---< check if all is there to not later error hard in the set template
    {%- set errors = [
        "Required parameter 'NAME' is missing."                         if name is none,
        "Required parameter 'TEMPLATE' is missing."                     if template is none,
        "Required 'T' or active tool is missing."                       if tn == -1,
        "Macro '[" ~ macro_name ~ "]' not found."                       if macro_name and macro_name not in p,
        "Template '[" ~ tmpl_name ~ "]' not found."                     if tmpl_name  and tmpl_name not in cfg,
        "variable_'" ~ name ~ "_led_name' not in [" ~ macro_name ~ "]." if tool_macro and name and not led_name,
        "variable_'" ~ name ~ "_idx' not in [" ~ macro_name ~ "]."      if tool_macro and name and not led_idxs,
        "Device '[" ~ led_long ~ "]' not found."                        if led_name   and led_long not in p
    ]|select|list
    -%}

    {% if not errors %}
        # ---< we all gucci, do the thing
        {% set e_name = cfg[tc.tool_names[tn]|lower].extruder %}
        {% set min_t = (cfg['heater_fan ' ~ e_name|lower] or {}).get('heater_temp', 50.0)|float %}
        {% set led_bright = (tool_macro.get(name ~ '_brightness', '1')|replace(' ','')).split(',') %}
        {% set led_idxs_list = (led_idxs|replace('[', '')|replace(']', '')).split(',') %}
        {% set led_brightness_list = [] %}
        # ---< loop over all the led indicies assigned
        {% for idx in led_idxs_list if not errors %}
            {% set brightness = (led_bright[loop.index0] if loop.index0 < led_bright|length else led_bright[-1])|float %}
            {% set _ = led_brightness_list.append(brightness) %}
            # ---< reset our extras list for this index, and add the needed parameters.
            {% set extra = [] %}
            {try_add_param('param_brightness', brightness,               extra)}
            {try_add_param('param_max_idx',    led_idxs_list|length - 1, extra)}
            {try_add_param('param_idx',        loop.index0,              extra)}
            {try_add_param('param_tn',         tn,                       extra)}
            {try_add_param('param_min_temp',   min_t,                    extra)}
            {% if 'chain_count' in cfg[led_long|lower] and idx|int <= cfg[led_long|lower].chain_count %}
                SET_LED_TEMPLATE LED={led_name} TEMPLATE={template} INDEX={idx|trim}{' ' ~ extra|join(' ') if extra else ''}
            {% else %}
                {% set _ = errors.append("led index " ~ idx|trim ~ " exceeds chain length of " ~ cfg[led_long|lower].chain_count) %}
            {% endif %}
        {% endfor %}
    {% endif %}
    {% if not errors %}
        # ---< update loaded templates cache
        {% set loaded_templates = var_cache.get('loaded_templates', {}) %}
        {% set _ = loaded_templates.update({tn ~ '_' ~ template: {'led_name':        led_long,
                                                                  'idx_list':        led_idxs_list,
                                                                  'brightness_list': led_brightness_list
                                                                  } }) %}
        {% set _ = var_cache.update({'loaded_templates': loaded_templates}) %}
        SET_GCODE_VARIABLE MACRO=_toolchanger_led_vars VARIABLE=cache VALUE="{var_cache}"
        {action_respond_info("Applied '" ~ template ~ "' to '" ~ led_name ~ "(" ~ led_idxs ~ ")'")}
    {% endif %}
    # ---< we not okay :(
    {action_respond_info(errors|join('\n')) if errors else ''}



[gcode_macro _UPDATE_TOOL_UI]
description: "Sync mainsail buttons with leds"
gcode:
    {% set gamma, k = 2.2, 9 %}
    {%- macro gam_scale(val) -%}{[((val|float ** (1/gamma)) * 255)|int, 255]|min}{%- endmacro -%}
    {%- macro log_scale(val) -%}{[(((1.0+k ** val|float) - 1.0) / k * 255.0)|int, 255]|min}{%- endmacro -%}
    {% set store  = printer['gcode_macro _toolchanger_led_vars'] %}
    {% set loaded = store.cache.get('loaded_templates', {}) %}
    {% for key, data in loaded.items() if loaded and key.split('_', 1)|length == 2 %}
        {% set parts = key.split('_', 1) %}
        {% set tn, tpl  = parts[0]|int, parts[1] %}
        {% if tpl == 'logo' and 'gcode_macro T' ~ tn in printer and 'color' in printer['gcode_macro T' ~ tn] %}
            {% set leddev   = data.get('led_name') %}
            {% set idx_list = data.get('idx_list') %}
            {% if leddev and leddev in printer and idx_list and idx_list|length %}
                {% set raw_mid = idx_list[(idx_list|length - 1) // 2]|int %}
                {% set max_idx = printer[leddev].color_data|length - 1 %}
                {% set rgb     = printer[leddev].color_data[[raw_mid, max_idx]|min] %}
                {% set hex = '%02X%02X%02X'  % (gam_scale(rgb[0])|int, gam_scale(rgb[1])|int, gam_scale(rgb[2])|int) %} 
                {% set css = 'rgb(%d,%d,%d)' % (gam_scale(rgb[0])|int, gam_scale(rgb[1])|int, gam_scale(rgb[2])|int) %}
                SET_GCODE_VARIABLE MACRO="{'T' ~ tn}" VARIABLE=color VALUE="'{hex}'"
            {% endif %}
        {% endif %}
    {% endfor %}
    {% for tn in printer.toolchanger.tool_numbers if 'active' in printer['gcode_macro T' ~ tn] %}
        SET_GCODE_VARIABLE MACRO="{'T' ~ tn}" VARIABLE=active VALUE="{tn == printer.toolchanger.tool_number}"
    {% endfor %}
