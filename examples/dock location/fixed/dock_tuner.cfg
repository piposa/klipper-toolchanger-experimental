
[gcode_macro DOCK_TUNER]
description: "Cyclic dock tuner: step pickup/dropoff safely; auto-detect at pickup verify"
variable_path_interpolation: 2 # '< 1' to disable, 2... upsampling to N steps
variable_state: {'ui_is_open': False, 'idx': -1, 'speed_multiplier': 1.0}
gcode:
    # ╭──────────────────────────────── shorts ────────────────────────────────╮
    {% set NAME         = 'DOCK_TUNER' %}
    {% set tc           = printer.toolchanger %}
    {% set tpe          = printer.tool_probe_endstop if 'tool_probe_endstop' in printer else {} %}
    {% set provided_tn  = params.T|default('only provide when no tool selected/active')|int(None) %}
    {% set tn_detected  = (tc.detected_tool_number) if tc.has_detection else tpe.get('active_tool_number', -1) %}
    {% set tn           = tc.tool_number %}
    # ╰────────────────────────────────────────────────────────────────────────╯
    
    # ╭──────────────────────────────── Ensure you dont crash ────────────────────────────────╮
    {% if tn in [None, -1] and provided_tn is none %}
        { action_raise_error('DOCK_TUNER: no tool selected please provide <c>T</c>') }
        { action_respond_info('<i>If you think this is a mistake, run <c>DOCK_TUNER RESET=1</c>') }
    {% elif tn_detected != -1 and provided_tn is not none and not state.get('ui_is_open', False) %}
        { action_raise_error('DOCK_TUNER: please only provide <c>T</c> after dropping the tool off.') }
        { action_respond_info('<i>If you think this is a mistake, run <c>DETECT_ACTIVE_TOOL_PROBE</c>' if tpe else '') }
    {% elif tn == -1 %}
        {% set tn = provided_tn %} # if for some reason it initializes with none mid run, dont fail with tn = -1
    {% endif %}
    # ╰───────────────────────────────────────────────────────────────────────────────────────╯

    {% set tool         = printer[tc.tool_names[tn]] %}
    {% set tname_short  = tool.name|replace('tool ', '') %}
    {% set dock         = {'x': tool.params_park_x|float, 'y': tool.params_park_y|float, 'z': tool.params_park_z|float} %}
    {% set pick         = tool.params_pickup_path %}
    {% set drop         = tool.params_dropoff_path %}
    {% set ps           = tool.params_path_speed|float %}
    {% set safe_y       = tool.params_safe_y|float %}

    {% set y_safe_off = safe_y - dock.y %}

    {% macro ui(m) %}{ action_respond_info('action:prompt_' ~ m) }{% endmacro %}
    
    {% macro but(m, sec=None) %}
        { ui('button_group_start') if sec in ['first', 'both'] else '' }
        { ui('button ' ~ m) }
        { ui('button_group_end')   if sec in ['last', 'both']  else '' }
    {% endmacro %}

    # what actually gets called to update the dock pos. i save it to save variables.
    {% macro update_dock_pos(ax, val) %}
        {% if variable_helper is defined %}
            {% import variable_helper as svh with context %}
            { svh.svf_update('dock_' ~ tname_short|lower ~ '.' ~ ax, val) }
        {% endif %}
        SET_TOOL_PARAMETER T={tool.tool_number} PARAMETER={ 'params_park_' ~ ax } VALUE={val}
    {% endmacro %}

    # ╭──────────────────────────────── Path movement macros ────────────────────────────────╮
    {%- macro is_dup_node(a, b) -%}
        {%- for k in ['x','y','z','verify'] if a.get(k, None)|float(None) != b.get(k, None)|float(None) -%}
        {%- else -%} # didnt run at all, its duplicate.
            True
        {%- endfor -%}
    {%- endmacro -%}

    {% macro move_step(s) %}
        {% set parms = [] %}
        {% for ax in ['x', 'y', 'z'] %}{% set _ = parms.append(ax|upper ~ (dock[ax] + s[ax])|round(2)) %}{% endfor %}
        {% set _ = parms.append('F' ~ (ps * s.f * state.get('speed_multiplier', 1.0))|round(2) ) %}
        G90
        G0 {parms|join(' ')}
        {'DETECT_ACTIVE_TOOL_PROBE' if 'verify' in s and tpe else ''}
    {% endmacro %}

    {% macro walk(dir, stop_kind, stop_arg = 0) %}
        {% set ns = namespace(i=state.idx, last=0, moved=0, done=0) %}
        {% if ns.i < 0 %}{% set ns.i = (N - 1 if dir > 0 else 0) %}{% endif %}
        {% set ns.last = ns.i %}
        {% for _ in range(N) if not ns.done %}
            {% set j = ns.i + dir %}
            {% if j < 0 %}{% set j = N - 1 %}{% endif %}
            {% if j >= N %}{% set j = 0 %}{% endif %}
            {% set A = cycle[j] %}
            {% if not is_dup_node(A, cycle[ns.last]) %}
                { move_step(A) }
                {% set ns.last = j %}
                {% set _ = state.update({'idx': j}) %}
                {% set ns.moved = ns.moved + 1 %}
            {% endif %}
            {% set ns.i = j %}
            {% if stop_kind == 'index' and j == stop_arg %}{% set ns.done = 1 %}{% endif %}
            {% if stop_kind == 'safe'  and A.get('y', none) == y_safe_off %}{% set ns.done = 1 %}{% endif %}
            {% if stop_kind == 'count' and ns.moved >= stop_arg %}{% set ns.done = 1 %}{% endif %}
        {% endfor %}
    {% endmacro %}
    # ╰──────────────────────────────────────────────────────────────────────────────────────╯
    
    # ╭──────────────────────────────── Path preperation ────────────────────────────────╮
    {%- macro normalize_path(path) -%}
        # {'x': 1.0, 'y': 2.0}, {'x': 1.0, 'z': 3.0}  
        # gets padded to:
        # {'x': 1.0, 'y': 2.0, 'z':0.0, 'f':1.0}, {'x': 1.0, 'y': 2.0, 'z':3.0, 'f':1.0}
        {% set last_pos_buffer = {'x': 0.0, 'y': 0.0, 'z': 0.0, 'f': 1.0} %}
        {% for step in path %}
            {% for axis in last_pos_buffer.keys() %}
                {% set _ = step.setdefault(axis, last_pos_buffer.get(axis)|float) %}
                {% set _ = last_pos_buffer.update({ axis: step.get(axis)|float }) %}
            {% endfor %}
        {% endfor %}
    {%- endmacro -%}

    {%- macro upsample_path(path, factor=path_interpolation) -%}
        # interpolate the steps
        {% set factor = factor|int %}
        {% if factor > 1 %}
            {% set N = path|length %}
            {% for idx in range(N - 1, 0, -1) %}
                {% set a, b = path[idx - 1], path[idx] %}
                {% set ax, ay, az, af = a.get('x')|float, a.get('y')|float, a.get('z')|float, a.get('f', 1.0)|float %}
                {% set bx, by, bz, bf = b.get('x')|float, b.get('y')|float, b.get('z')|float, b.get('f', 1.0)|float %}
                {% for k in range(factor - 1) %}
                    {% set t = (factor - 1 - k) / factor %}
                    {% set node = {
                        'x': (ax + (bx - ax) * t)|round(4),
                        'y': (ay + (by - ay) * t)|round(4),
                        'z': (az + (bz - az) * t)|round(4),
                        'f': (af + (bf - af) * t)|round(4)
                    } %}
                    {% set _ = path.insert(idx, node) %}
                {% endfor %}
            {% endfor %}
        {% endif %}
    {%- endmacro -%}
    # ╰──────────────────────────────────────────────────────────────────────────────────╯

    # ╭───────────────────────────────────────── UI ─────────────────────────────────────────╮
    {% macro create_ui() %}
        {% set C_SLOW, C_FAST, C_RESET = (120,200,160),
                                         (225,120,145), 
                                         (155,150,205) 
                                         %}
        {% set axis_colors = {'X': (200, 110, 120), 
                              'Y': (120, 185, 150), 
                              'Z': (120, 150, 210),
                            } %}
        {% set step_alphas = { -0.5: 0.6, 
                               -0.1: 0.5, 
                                0.1: 0.5, 
                                0.5: 0.6,
                            } %}
        { ui('begin Dock Tuner (' ~ tname_short ~ ')') }

        { ui('text Step through the path') }
        { but('[ ↶ --- ]|' ~ NAME ~ ' STEP=-1 T=' ~ tn ~ '|rgba(80,145,160,0.80)',  'first') }
        { but('[ --- ↷ ]|' ~ NAME ~ ' STEP=1 T='  ~ tn ~ '|rgba(215,150,100,0.82)', 'last')  }
        { ui('text Run through the path') }
        { but('[ ⭮ run pick ]|'     ~ NAME ~ ' RUN=PICK T=' ~ tn ~ '|rgba(72,150,160,0.84)',  'first') }
        { but('[ run drop ⭯ ]|'     ~ NAME ~ ' RUN=DROP T=' ~ tn ~ '|rgba(220,155,110,0.86)', 'last') }
        { but('[❔check detect ]|' ~ NAME ~ ' CHECK=1 T='  ~ tn ~ '|rgba(' ~ C_RESET|join(',') ~ ',' ~ 0.7 ~ ')',  'first') }
        { ui('show') }

        # --------------------------------- adjusting the docking speed ---------------------------------
        { ui('text tune docking speed') }
        
        {% set alpha = 0.1 if (1.0 - state.get('speed_multiplier', 1.0))|abs <= 0.01 else 0.7 %}
        { but('×' ~ ('%.2f' % 1.0) ~ '|' ~ NAME ~ ' SPD=' ~ 1 ~ ' T=' ~ tn ~ '|' ~ 'rgba(' ~ C_RESET|join(',') ~ ',' ~ alpha ~ ')', 'last') }
        { ui('button_group_start') }
        {% for mult in [ 0.25, 0.50, 1.50, 2.00 ] %}
            {% set is_active = (mult - state.get('speed_multiplier', 1.0))|abs <= 0.01 %}
            {% set rgb = C_SLOW if mult < 1 else (C_FAST if mult > 1 else C_RESET) %}
            {% set col = 'rgba(' ~ rgb|join(',') ~ ',' ~ (0.1 if is_active else 0.7) ~ ')' %}
            { but('×' ~ ('%.2f' % mult) ~ '|' ~ NAME ~ ' SPD=' ~ mult ~ ' T=' ~ tn ~ '|' ~ col) }
        {% endfor %}
        { ui('button_group_end') }
        { ui('footer_button [ ✖ ]|' ~ NAME ~ ' CLOSE=1 T=' ~ tn ~ '|red') }
        { ui('show') }

        # --------------------------------- adjusting the dock location ---------------------------------
        { ui('text tune dock position') }
        {% for ax, col in axis_colors.items() %}
            { ui('button_group_start') }
            {% for inc, alpha in step_alphas.items() %}
                {% set sgn = '+' if inc > 0 else '' %}
                {% set color = 'rgba(' ~ col|join(',') ~ ',' ~ alpha ~ ')' %}
                { but(ax ~ sgn ~ inc ~ '|' ~ NAME ~ ' AX=' ~ ax ~ ' AM=' ~ inc ~ ' T=' ~ tn ~ '|' ~ color) }
            {% endfor %}
            { ui('button_group_end') }
        {% endfor %}
        { but('[ ♻ ] Reset docking position|' ~ NAME ~ ' RESET_DOCK=1 T=' ~ tn ~ '|rgba(' ~ C_RESET|join(',') ~ ',' ~ 0.7 ~ ')', 'both') }
        { ui('show') }
    {% endmacro %}
    # ╰──────────────────────────────────────────────────────────────────────────────────────╯

    # ╭───────────────────────────────── build the actual path to run ─────────────────────────────────╮
    {% set _, _ = normalize_path(pick), normalize_path(drop) %}
    {% set _, _ = upsample_path(pick),  upsample_path(drop) %}

    {% set fast_speed  = (pick|map(attribute='f')|list + drop|map(attribute='f')|list)|max * 2.0 %}
    {% set verify_step = pick|selectattr('verify')|list|first %}

    {% set safe_node  = {'y': y_safe_off, 'z': 0, 'f': fast_speed } %} # start at dock, at safe_y

    {% set drop_approach_z = drop|map(attribute='z')|list|max %}  # either up or down

    {% set pick_approach_z = pick|map(attribute='z')|list|min %}  # if pick or drop
    {% set pick_leave_z    = pick|map(attribute='z')|list|max %}  # if pick or drop

    {% set y_half_pick = (y_safe_off + pick[0].get('y', 0)|float) / 2.0 %}
    {% set y_half_drop = (y_safe_off + drop[0].get('y', 0)|float) / 2.0 %}

    {% set cycle = [] %}

    {% set _ = cycle.append(safe_node) %}
    {% set _ = cycle.append({'y': y_half_pick, 'z': pick_approach_z, 'f': fast_speed}) %}
    {% set _ = cycle.append({'x': pick[0].get('x', 0)|float, 'z': pick[0].get('z', 0)|float, 'y': y_half_pick, 'f': fast_speed}) %}
    {% set _ = cycle.append({'x': pick[0].get('x', 0)|float, 'z': pick[0].get('z', 0)|float, 'y': pick[0].get('y', 0)|float, 'f': fast_speed}) %}

    {% set pick_start = cycle|length %}{% set _ = cycle.extend(pick) %}{% set pick_end   = cycle|length - 1 %}

    {% set pu_verify = pick_start + pick.index(verify_step) if verify_step else -1 %}

    {% set _ = cycle.append({'y': y_half_pick, 'z': pick_leave_z, 'f': fast_speed}) %}
    {% set _ = cycle.append(safe_node) %} # <- you start here
    {% set _ = cycle.append({'y': y_half_drop, 'z': drop_approach_z, 'f': fast_speed}) %}
    {% set _ = cycle.append({'x': drop[0].get('x', 0)|float, 'z': drop[0].get('z', 0)|float, 'y': y_half_drop, 'f': fast_speed}) %}
    {% set _ = cycle.append({'x': drop[0].get('x', 0)|float, 'z': drop[0].get('z', 0)|float, 'y': drop[0].get('y', 0)|float, 'f': fast_speed}) %}

    {% set drop_start = cycle|length %}{% set _ = cycle.extend(drop) %}{% set drop_end   = cycle|length - 1 %}

    {% set _ = normalize_path(cycle) %}

    {% set N    = cycle|length %}
    {% set cur  = N - 1 if state.idx < 0 else state.idx %}
    # ╰────────────────────────────────────────────────────────────────────────────────────────────────╯

    # ╭───────────────────────────────── Actual logic in here ─────────────────────────────────╮
    {% if 'STEP' in params %}
        {% set amnt = params.STEP|int %}
        {% set dir = -1 if amnt < 0 else 1 %}
        { walk(dir, 'count', amnt|abs) }

    {% elif 'RUN' in params %}
        {% if params.RUN == 'PICK' %}
            { walk(1, 'index', pick_end) }
            { walk(1, 'safe') }
            RESPOND TYPE=echo MSG="DOCK_TUNER: pickup → end complete (moved to safe_y)"

        {% elif params.RUN == 'DROP' %}
            {% set in_pickup = (cur >= pick_start and cur <= pick_end) %}
            {% set allow_forward = True %}
            {% if in_pickup and pu_verify != -1 %}
                {% set allow_forward = False if cur < pu_verify else allow_forward %}
                {% set allow_forward = False if cur >= pu_verify and (tn_detected != tn and tn_detected != -1) else allow_forward %}
            {% endif %}
            {% if allow_forward %}
                { walk(1, 'index', drop_end) }
                { walk(1, 'safe') }
                RESPOND TYPE=echo MSG="DOCK_TUNER: dropoff→end complete (moved to safe_y)"
            {% else %}
                { walk(-1, 'safe') }
                RESPOND TYPE=echo MSG="DOCK_TUNER: reversed to safe_y"
            {% endif %}
        {% endif %}

    {% elif 'CHECK' in params %}
        {'DETECT_ACTIVE_TOOL_PROBE' if tpe else ''}
        RESPOND TYPE=echo MSG="detected tool: {tc.tool_names[tn_detected] if tn_detected not in [-1, None] else None}"

    {% elif 'AX' in params and 'AM' in params %}

        {% set ax = params.AX|lower %}
        {% set am = params.AM|float %}
        {% set newv = (dock[ax]|float + am)|round(3) %}
        { update_dock_pos(ax, newv) }
        G91
        G0 { ' ' ~ ax|upper ~ am }
        G90

    {% elif 'RESET_DOCK' in params %}
        {% for ax, val in state.orig_dock.items() %}
            { update_dock_pos(ax, val) }
        {% endfor %}

    {% elif 'CLOSE' in params %}
        { ui('end') }
        {% set _ = state.update({'ui_is_open': False}) %}
        {% set out = [] %}
        {% for ax in ( 'x', 'y', 'z' ) %}
            {% set _ = out.append('params_park_' ~ ax ~ ': ' ~ ('%.2f' % dock[ax])) %}
            SAVE_TOOL_PARAMETER T={tn} PARAMETER={'params_park_' ~ ax}
        {% endfor %}
        {%- set block -%}
            <div style='margin:6px 0 3px 0;'><b>{NAME}</b><br>New docking position is:</div>

            <div class='accent--text text--lighten-1'
                 style='display:block; width:fit-content; max-width:100%;
                        background:rgba(0,0,0,0.35); border:2px solid currentColor;
                        border-radius:4px; padding:0.5em; box-sizing:border-box;'>
                <pre class='text--primary'
                     style='margin:0; display:inline-block; max-width:100%;
                            white-space:pre; overflow:auto; line-height:1.25em;
                            padding:0 1em; box-sizing:border-box;'>{ out|join('<br>') }</pre>
            </div>

            <blockquote class='accent--text text--lighten-1'
                        style='display:inline-block; width:fit-content; max-width:100%;
                               margin-top:0.6em; white-space:normal;
                               overflow-wrap:anywhere; word-break:break-word;
                               padding:0.5em 0.75em; border-left:3px solid currentColor;
                               background:rgba(255,255,255,0.06); line-height:1.25em;'>
                <span class='text--primary'>
                    Either manually save these values,<br>
                    or comment out the parking position in your config and call <b><code>SAVE_CONFIG</code></b>
                </span>
            </blockquote>
        {%- endset -%}

        { action_respond_info(block|replace('\n','')) }

    {% elif 'RESET' in params %}
        {% set state = {'ui_is_open': False, 'idx': -1} %}

    {% elif 'SPD' in params %}
        {% set _ = state.update({'speed_multiplier': params.SPD|float|round(2)}) %}
        { create_ui() }
    {% else %}
        { create_ui() }
        # if provided_tn gets to here, we have no tool equipped and start at IDX 0
        {% set start_idx = pick_end + 2 if provided_tn is none else 0 %}
        { move_step(cycle[start_idx]) }
        {% set _ = state.update({'ui_is_open': True, 'orig_dock': dock, 'idx': start_idx}) %}  
    {% endif %}
    # ╰────────────────────────────────────────────────────────────────────────────────────────╯

    # always maintain state
    SET_GCODE_VARIABLE MACRO={NAME} VARIABLE=state VALUE="{state}"
    M400

[gcode_macro RESPOND]
rename_existing: _RESPOND_DOCK_TUNER_INFERRED
gcode:
    _RESPOND_DOCK_TUNER_INFERRED {rawparams}
    # just make sure its not part of a UI element, and actually a close
    {% if 'action:prompt_end' in rawparams and not 'RESPOND' in rawparams %}
        {% set state = printer['gcode_macro DOCK_TUNER'].state %}
        {% set _ = state.update({'ui_is_open': False}) %}
        SET_GCODE_VARIABLE MACRO=DOCK_TUNER VARIABLE=state VALUE="{state}"
    {% endif %}
